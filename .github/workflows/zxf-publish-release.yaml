name: "Publish Release"
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Existing Tag to Publish (eg: v3.7.0)"
        type: string
        required: true
      dry-run-enabled:
        description: "Dry Run Enabled"
        type: boolean
        required: false
        default: false
  push:
    tags:
      - "v*.*.*"

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: hiero-client-sdk-linux-medium

    outputs:
      # Project tag
      tag: ${{ steps.sdk-tag.outputs.name }}

      # main package
      sdk-version: ${{ steps.sdk-tag.outputs.version }}
      sdk-prerelease: ${{ steps.sdk-tag.outputs.prerelease }}
      sdk-type: ${{ steps.sdk-tag.outputs.type }}

      # proto subpackage
      proto-version: ${{ steps.cargo-versions.outputs.sdk-proto-version }}
      proto-prerelease: ${{ steps.proto-tag.outputs.prerelease }}
      proto-type: ${{ steps.proto-tag.outputs.type }}
      proto-publish-required: ${{ steps.proto-required.outputs.proto-publish-required }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.inputs.tag || '' }}
          fetch-depth: 0
          submodules: recursive

      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"
            
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # v1
        with:
          toolchain: 1.88.0

      - name: Install components
        run: |
          cargo install toml-cli

      - name: Extract Cargo.toml Versions
        id: cargo-versions
        run: |
          SDK_PACKAGE_VERSION="$(toml get Cargo.toml package.version --raw)"
          SDK_PROTO_VERSION="$(toml get protobufs/Cargo.toml package.version --raw)"
          
          echo "sdk-version=${SDK_PACKAGE_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "sdk-proto-version=${SDK_PROTO_VERSION}" >>"${GITHUB_OUTPUT}"

      - name: Proto Subpackage Publish Required
        id: proto-required
        run: |
          PUBLISH_REQUIRED="false"
          CRATES=("hedera-proto" "hiero-sdk-proto")
          for CRATE in "${CRATES[@]}"; do
            if ! curl -sSLf "https://crates.io/api/v1/crates/${CRATE}/${{ steps.cargo-versions.outputs.sdk-proto-version }}" >/dev/null 2>&1; then
                PUBLISH_REQUIRED="true"
            fi
          done
          echo "proto-publish-required=${PUBLISH_REQUIRED}" >>"${GITHUB_OUTPUT}"

      - name: Extract SDK Tag Information
        id: sdk-tag
        run: |
          REF_NAME="$(git describe --exact-match --tags $(git log -n1 --pretty='%h'))"
          IS_VALID_SEMVER="$(semver validate "${REF_NAME}")"
          if [[ "${IS_VALID_SEMVER}" != "valid" ]]; then
            echo "::error title=Invalid Tag::The tag '${REF_NAME}' is not a valid SemVer tag."
            exit 1
          fi

          RELEASE_VERSION="$(semver get release "${REF_NAME}")"
          PREREL_VERSION="$(semver get prerel "${REF_NAME}")"
          PREREL_VERSION_LC="$(printf "%s" "${PREREL_VERSION}" | tr '[:upper:]' '[:lower:]')"

          IS_PRERELEASE="false"
          [[ -n "${PREREL_VERSION}" ]] && IS_PRERELEASE="true"
          PREREL_TYPE="unknown"
          if [[ "${IS_PRERELEASE}" == "true" ]]; then
            if [[ "${PREREL_VERSION_LC}" =~ "beta" ]]; then
              PREREL_TYPE="beta"
            else
              PREREL_TYPE="unknown"
            fi
          else
            PREREL_TYPE="production"
          fi

          FINAL_VERSION="${RELEASE_VERSION}"
          [[ -n "${PREREL_VERSION}" ]] && FINAL_VERSION="${RELEASE_VERSION}-${PREREL_VERSION}"

          TAG_NAME="v${FINAL_VERSION}"
          
          echo "name=${TAG_NAME}" >> "${GITHUB_OUTPUT}"
          echo "version=${FINAL_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "prerelease=${IS_PRERELEASE}" >> "${GITHUB_OUTPUT}"
          echo "type=${PREREL_TYPE}" >> "${GITHUB_OUTPUT}"
          
          echo "## Release Information" >> "${GITHUB_STEP_SUMMARY}"
          echo "SDK_VERSION=${FINAL_VERSION}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Extract Proto Subpackage Information
        id: proto-tag
        run: |
          IS_VALID_SEMVER="$(semver validate "${{ steps.cargo-versions.outputs.sdk-proto-version }}")"
          
          if [[ "${IS_VALID_SEMVER}" != "valid" ]]; then
            echo "::error title=Invalid Proto Tag::The proto version '${{ steps.cargo-versions.outputs.sdk-proto-version }}' is not a valid SemVer tag."
            exit 1
          fi
          
          PREREL_VERSION="$(semver get prerel '${{ steps.cargo-versions.outputs.sdk-proto-version }}')"
          PREREL_VERSION_LC="$(printf "%s" "${PREREL_VERSION}" | tr '[:upper:]' '[:lower:]')"
          
          IS_PRERELEASE="false"
          [[ -n "${PREREL_VERSION}" ]] && IS_PRERELEASE="true"
          
          PREREL_TYPE="unknown"
          if [[ "${IS_PRERELEASE}" == "true" ]]; then
            if [[ "${PREREL_VERSION_LC}" =~ "beta" ]]; then
              PREREL_TYPE="beta"
            else
              PREREL_TYPE="unknown"
            fi
          else
            PREREL_TYPE="production"
          fi

          echo "prerelease=${IS_PRERELEASE}" >>"${GITHUB_OUTPUT}"
          echo "type=${PREREL_TYPE}" >>"${GITHUB_OUTPUT}"
          
          echo "## Proto Subpackage Release Information" >> "${GITHUB_STEP_SUMMARY}"
          echo "SDK_PROTO_VERSION=${{ steps.cargo-versions.outputs.sdk-proto-version }}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Validate Tag and Cargo.toml Versions
        run: |
          COMPARISON_RESULT="$(semver compare "${{ steps.cargo-versions.outputs.sdk-version }}" "${{ steps.sdk-tag.outputs.version }}")"
          if [[ "${COMPARISON_RESULT}" -ne 0 ]]; then
            echo "::error title=Version Mismatch::The Cargo.toml version '${{ steps.cargo-versions.outputs.sdk-version }}' does not match the tag version '${{ steps.sdk-tag.outputs.version }}'."
            exit 1
          fi
          
          if [[ "${{ steps.sdk-tag.outputs.type }}" != "production" && "${{ steps.sdk-tag.outputs.type }}" != "beta" ]]; then
            echo "::error title=Invalid Prerelease Type::The prerelease type '${{ steps.sdk-tag.outputs.type }}' is not valid. Expected 'production' or 'beta'."
            exit 1
          fi

  run-safety-checks:
    name: Safety Checks
    runs-on: hiero-client-sdk-linux-medium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.inputs.tag || '' }}
          submodules: recursive

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # v1
        with:
          toolchain: 1.88.0

      - name: Install components
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev protobuf-compiler

      - name: Run Safety Checks
        run: |
          echo "::group::Run Safety Checks"
          cargo check
          echo "::endgroup::"

  publish:
    name: Publish SDK to crates.io
    needs:
      - validate-release
      - run-safety-checks
    runs-on: hiero-client-sdk-linux-medium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.inputs.tag || '' }}
          submodules: recursive

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # v1
        with:
          toolchain: 1.88.0

      - name: Install components
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev protobuf-compiler
          cargo install toml-cli

      - name: Calculate Proto Subpackage Publish Arguments
        id: proto-publish-args
        working-directory: protobufs
        if: ${{ needs.validate-release.outputs.proto-publish-required == 'true' && !cancelled() && !failure() }}
        run: |
          PUBLISH_ARGS="--locked --allow-dirty"
          [[ "${{ github.event.inputs.dry-run-enabled }}" == "true" ]] && PUBLISH_ARGS="${PUBLISH_ARGS} --dry-run"
          
          echo "args=${PUBLISH_ARGS}" >> "${GITHUB_OUTPUT}"

      - name: Calculate SDK Publish Arguments
        id: sdk-publish-args
        if: ${{ !cancelled() && !failure() }}
        run: |
          PUBLISH_ARGS="--locked --allow-dirty"
          [[ "${{ github.event.inputs.dry-run-enabled }}" == "true" ]] && PUBLISH_ARGS="${PUBLISH_ARGS} --dry-run"
          
          echo "args=${PUBLISH_ARGS}" >> "${GITHUB_OUTPUT}"

      # Publish the hiero-sdk-proto package
      - name: Publish Proto Subpackage to crates.io (hedera-proto)
        working-directory: protobufs
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_HG_TOKEN }}
        if: ${{ needs.validate-release.outputs.proto-publish-required == 'true' && !cancelled() && !failure() }}
        run: |         
          cargo publish ${{ steps.proto-publish-args.outputs.args }}

      # Publish the main SDK package
      - name: Publish SDK to crates.io (hedera)
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_HG_TOKEN }}
        run: |
          cargo publish ${{ steps.sdk-publish-args.outputs.args }}

      # Update the Cargo.toml files for the hiero-sdk-* packages
      - name: Update Cargo.toml for hiero publishing
        run: |
          echo "::group::Back up Cargo files"
          if [[ -f "Cargo.toml" ]]; then
            cp Cargo.toml Cargo.toml.bak
          fi
          if [[ -f "Cargo.lock" ]]; then
            cp Cargo.lock Cargo.lock.bak
          fi
          if [[ -f "protobufs/Cargo.toml" ]]; then
            cp protobufs/Cargo.toml protobufs/Cargo.toml.bak
          fi
          if [[ -f "protobufs/Cargo.lock" ]]; then
            cp protobufs/Cargo.lock protobufs/Cargo.lock.bak
          fi
          if [[ -f "tck/Cargo.toml" ]]; then
            cp tck/Cargo.toml tck/Cargo.toml.bak
          fi
          if [[ -f "tck/Cargo.lock" ]]; then
            cp tck/Cargo.lock tck/Cargo.lock.bak
          fi
          echo "::endgroup::"
          
          echo "::group::Update protobufs/Cargo.toml with new name"       
          # Update the dependencies in the protobugs/Cargo.toml
          toml set protobufs/Cargo.toml package.name "hiero-sdk-proto" > protobufs/Cargo.toml.tmp && mv protobufs/Cargo.toml.tmp protobufs/Cargo.toml
          echo "::endgroup::"
          
          echo "::group::Update main Cargo.toml with new name and dependencies"
          toml set Cargo.toml package.name "hiero-sdk" > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
          
          # Update the dependencies in the main Cargo.toml
          toml set Cargo.toml dependencies.hiero-sdk-proto.package "hiero-sdk-proto" > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
          toml set Cargo.toml dependencies.hiero-sdk-proto.version "${{ needs.validate-release.outputs.sdk-version }}" > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
          toml set Cargo.toml dependencies.hiero-sdk-proto.features "['time_0_3', 'fraction']" > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
          
          # Convert features from string to array format
          sed -i "s/features = \"\['time_0_3', 'fraction'\]\"/features = [\"time_0_3\", \"fraction\"]/g" Cargo.toml
          
          # Remove the hedera-proto dependency from the main Cargo.toml
          sed '/hedera-proto.*/d' Cargo.toml > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
          echo "::endgroup::"
          
          echo "::group::Update TCK Cargo.toml with new dependencies"
          # Update the dependencies in the tck/Cargo.toml
          toml set tck/Cargo.toml dependencies.hiero-sdk-proto.package "hiero-sdk-proto" > tck/Cargo.toml.tmp && mv tck/Cargo.toml.tmp tck/Cargo.toml
          toml set tck/Cargo.toml dependencies.hiero-sdk-proto.version "${{ needs.validate-release.outputs.sdk-version }}" > tck/Cargo.toml.tmp && mv tck/Cargo.toml.tmp tck/Cargo.toml
          toml set tck/Cargo.toml dependencies.hiero-sdk-proto.features "['time_0_3', 'fraction']" > tck/Cargo.toml.tmp && mv tck/Cargo.toml.tmp tck/Cargo.toml
          
          # Update the hedera dependency in the tck/Cargo.toml
          toml set tck/Cargo.toml dependencies.hiero-sdk.package "hiero-sdk" > tck/Cargo.toml.tmp && mv tck/Cargo.toml.tmp tck/Cargo.toml
          toml set tck/Cargo.toml dependencies.hiero-sdk.path "../." > tck/Cargo.toml.tmp && mv tck/Cargo.toml.tmp tck/Cargo.toml
          
          # Convert features from string to array format
          sed -i "s/features = \"\['time_0_3', 'fraction'\]\"/features = [\"time_0_3\", \"fraction\"]/g" tck/Cargo.toml
          
          # Remove the hedera-proto and hedera dependencies from the tck Cargo.toml file
          sed '/hedera-proto.*/d' /tck/Cargo.toml > tck/Cargo.toml.tmp && mv tck/Cargo.toml.tmp tck/Cargo.toml
          sed '/hedera.*/d' tck/Cargo.toml > tck/Cargo.toml.tmp && mv tck/Cargo.toml.tmp tck/Cargo.toml
          echo "::endgroup::"
          
          echo "group::Verify Cargo.toml changes"
          cargo check
          cargo generate-lockfile
          echo "::endgroup::"

      - name: Publish proto to crates.io (hiero-sdk-proto)
        working-directory: protobufs
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_HL_TOKEN }}
        if: ${{ needs.validate-release.outputs.proto-publish-required == 'true' && !cancelled() && !failure() }}
        run: |
          cargo publish ${{ steps.proto-publish-args.outputs.args }}

      - name: Publish hiero-sdk-proto to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_HL_TOKEN }}
        run: |
          cargo publish ${{ steps.sdk-publish-args.outputs.args }}

      - name: Restore Cargo files
        run: |
          echo "::group::Restore Cargo files"
          if [[ -f "Cargo.toml.bak" ]]; then
            mv Cargo.toml.bak Cargo.toml
          fi
          if [[ -f "Cargo.lock.bak" ]]; then
            mv Cargo.lock.bak Cargo.lock
          fi
          if [[ -f "protobufs/Cargo.toml.bak" ]]; then
            mv protobufs/Cargo.toml.bak protobufs/Cargo.toml
          fi
          if [[ -f "protobufs/Cargo.lock.bak" ]]; then
            mv protobufs/Cargo.lock.bak protobufs/Cargo.lock
          fi
          if [[ -f "tck/Cargo.toml.bak" ]]; then
            mv tck/Cargo.toml.bak tck/Cargo.toml
          fi
          if [[ -f "tck/Cargo.lock.bak" ]]; then
            mv tck/Cargo.lock.bak tck/Cargo.lock
          fi
          echo "::endgroup::"
