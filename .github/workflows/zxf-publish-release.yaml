name: "ZXF: Publish Release"
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Existing Tag to Publish (eg: v3.7.0)"
        type: string
        required: true
      dual-publish-enabled:
        description: "Dual Publish Enabled"
        type: boolean
        required: false
        default: true
      dry-run-enabled:
        description: "Dry Run Enabled"
        type: boolean
        required: false
        default: false
  push:
    tags:
      - "v*.*.*"

defaults:
  run:
    shell: bash

permissions:
  contents: write

env:
  SOLO_CLUSTER_NAME: "solo-rust"
  SOLO_NAMESPACE: "solo-rust"
  SOLO_CLUSTER_SETUP_NAMESPACE: "solo-rust-cluster"
  SOLO_DEPLOYMENT: "solo-rust-deployment"
  CONSENSUS_NODE_VERSION: "v0.61.4"
  NODE_VERSION: "20.18.3"

jobs:
  validate-release:
    name: Validate Release
    runs-on: hiero-client-sdk-linux-medium
    env:
      DUAL_PUBLISH_ENABLED: ${{ inputs.dual-publish-enabled || github.event_name == 'push' }}
    outputs:
      # Project tag
      tag: ${{ steps.sdk-tag.outputs.name }}

      # main package
      sdk-version: ${{ steps.sdk-tag.outputs.version }}
      sdk-prerelease: ${{ steps.sdk-tag.outputs.prerelease }}
      sdk-type: ${{ steps.sdk-tag.outputs.type }}
      hedera-publish-required: ${{ steps.hedera-sdk-required.outputs.hedera-publish-required }}
      hiero-publish-required: ${{ steps.hiero-sdk-required.outputs.hiero-publish-required }}

      # proto subpackage
      proto-version: ${{ steps.cargo-versions.outputs.sdk-proto-version }}
      proto-prerelease: ${{ steps.proto-tag.outputs.prerelease }}
      proto-type: ${{ steps.proto-tag.outputs.type }}
      hedera-proto-publish-required: ${{ steps.hedera-proto-required.outputs.hedera-proto-publish-required }}
      hiero-proto-publish-required: ${{ steps.hiero-sdk-proto-required.outputs.hiero-proto-publish-required }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.tag || '' }}
          fetch-depth: 0
          submodules: recursive

      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"
            
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # v1
        with:
          toolchain: 1.88.0

      - name: Install components
        run: |
          cargo install toml-cli

      - name: Extract Cargo.toml Versions
        id: cargo-versions
        run: |
          SDK_PACKAGE_VERSION="$(toml get Cargo.toml package.version --raw)"
          SDK_PROTO_VERSION="$(toml get protobufs/Cargo.toml package.version --raw)"
          
          echo "sdk-version=${SDK_PACKAGE_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "sdk-proto-version=${SDK_PROTO_VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Hedera Proto Subpackage Publish Required
        id: hedera-proto-required
        run: |
          HEDERA_PROTO_PUBLISH_REQUIRED="false"
          if ! curl -sSLf "https://crates.io/api/v1/crates/hedera-proto/${{ steps.cargo-versions.outputs.sdk-proto-version }}" >/dev/null 2>&1; then
            HEDERA_PROTO_PUBLISH_REQUIRED="true"
          fi
          echo "hedera-proto-publish-required=${HEDERA_PROTO_PUBLISH_REQUIRED}" >> "${GITHUB_OUTPUT}"

      - name: Hiero SDK Proto Subpackage Publish Required
        id: hiero-sdk-proto-required
        if: ${{ env.DUAL_PUBLISH_ENABLED == 'true' }}
        run: |
          HIERO_SDK_PROTO_PUBLISH_REQUIRED="false"
          if ! curl -sSLf "https://crates.io/api/v1/crates/hiero-sdk-proto/${{ steps.cargo-versions.outputs.sdk-proto-version }}" >/dev/null 2>&1; then
            HIERO_SDK_PROTO_PUBLISH_REQUIRED="true"
          fi
          echo "hiero-proto-publish-required=${HIERO_SDK_PROTO_PUBLISH_REQUIRED}" >> "${GITHUB_OUTPUT}"

      - name: Hedera SDK Publish Required
        id: hedera-sdk-required
        run: |
          HEDERA_SDK_PUBLISH_REQUIRED="false"
          if ! curl -sSLf "https://crates.io/api/v1/crates/hedera/${{ steps.cargo-versions.outputs.sdk-version }}" >/dev/null 2>&1; then
            HEDERA_SDK_PUBLISH_REQUIRED="true"
          fi
          echo "hedera-publish-required=${HEDERA_SDK_PUBLISH_REQUIRED}" >> "${GITHUB_OUTPUT}"

      - name: Hiero SDK Publish Required
        id: hiero-sdk-required
        if: ${{ env.DUAL_PUBLISH_ENABLED == 'true' }}
        run: |
          HIERO_SDK_PUBLISH_REQUIRED="false"
          if ! curl -sSLf "https://crates.io/api/v1/crates/hiero-sdk/${{ steps.cargo-versions.outputs.sdk-version }}" >/dev/null 2>&1; then
            HIERO_SDK_PUBLISH_REQUIRED="true"
          fi
          echo "hiero-publish-required=${HIERO_SDK_PUBLISH_REQUIRED}" >> "${GITHUB_OUTPUT}"

      - name: Package Version Summary
        run: |
          echo "## Package Version Summary" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Package | Version | Publish Required |" >> "${GITHUB_STEP_SUMMARY}"
          echo "|---------|---------|------------------|" >> "${GITHUB_STEP_SUMMARY}"
          echo "| hedera-proto | ${{ steps.cargo-versions.outputs.sdk-proto-version }} | ${{ steps.hedera-proto-required.outputs.hedera-proto-publish-required }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| hiero-sdk-proto | ${{ steps.cargo-versions.outputs.sdk-proto-version }} | ${{ steps.hiero-sdk-proto-required.outputs.hiero-proto-publish-required }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| hedera | ${{ steps.cargo-versions.outputs.sdk-version }} | ${{ steps.hedera-sdk-required.outputs.hedera-publish-required }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| hiero-sdk | ${{ steps.cargo-versions.outputs.sdk-version }} | ${{ steps.hiero-sdk-required.outputs.hiero-publish-required }} |" >> "${GITHUB_STEP_SUMMARY}"

      - name: Extract SDK Tag Information
        id: sdk-tag
        env:
          REF_NAME: ${{ inputs.tag || steps.cargo-versions.outputs.sdk-version }}
        run: |
          IS_VALID_SEMVER="$(semver validate "${REF_NAME}")"
          if [[ "${IS_VALID_SEMVER}" != "valid" ]]; then
            echo "::error title=Invalid Tag::The tag '${REF_NAME}' is not a valid SemVer tag."
            exit 1
          fi

          RELEASE_VERSION="$(semver get release "${REF_NAME}")"
          PREREL_VERSION="$(semver get prerel "${REF_NAME}")"
          PREREL_VERSION_LC="$(printf "%s" "${PREREL_VERSION}" | tr '[:upper:]' '[:lower:]')"

          IS_PRERELEASE="false"
          [[ -n "${PREREL_VERSION}" ]] && IS_PRERELEASE="true"
          PREREL_TYPE="unknown"
          if [[ "${IS_PRERELEASE}" == "true" ]]; then
            if [[ "${PREREL_VERSION_LC}" =~ "beta" ]]; then
              PREREL_TYPE="beta"
            else
              PREREL_TYPE="unknown"
            fi
          else
            PREREL_TYPE="production"
          fi

          FINAL_VERSION="${RELEASE_VERSION}"
          [[ -n "${PREREL_VERSION}" ]] && FINAL_VERSION="${RELEASE_VERSION}-${PREREL_VERSION}"

          TAG_NAME="v${FINAL_VERSION}"
          
          echo "name=${TAG_NAME}" >> "${GITHUB_OUTPUT}"
          echo "version=${FINAL_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "prerelease=${IS_PRERELEASE}" >> "${GITHUB_OUTPUT}"
          echo "type=${PREREL_TYPE}" >> "${GITHUB_OUTPUT}"
          
          echo "## Release Information" >> "${GITHUB_STEP_SUMMARY}"
          echo "SDK_VERSION=${FINAL_VERSION}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Extract Proto Subpackage Information
        id: proto-tag
        run: |
          IS_VALID_SEMVER="$(semver validate "${{ steps.cargo-versions.outputs.sdk-proto-version }}")"
          
          if [[ "${IS_VALID_SEMVER}" != "valid" ]]; then
            echo "::error title=Invalid Proto Tag::The proto version '${{ steps.cargo-versions.outputs.sdk-proto-version }}' is not a valid SemVer tag."
            exit 1
          fi
          
          PREREL_VERSION="$(semver get prerel '${{ steps.cargo-versions.outputs.sdk-proto-version }}')"
          PREREL_VERSION_LC="$(printf "%s" "${PREREL_VERSION}" | tr '[:upper:]' '[:lower:]')"
          
          IS_PRERELEASE="false"
          [[ -n "${PREREL_VERSION}" ]] && IS_PRERELEASE="true"
          
          PREREL_TYPE="unknown"
          if [[ "${IS_PRERELEASE}" == "true" ]]; then
            if [[ "${PREREL_VERSION_LC}" =~ "beta" ]]; then
              PREREL_TYPE="beta"
            else
              PREREL_TYPE="unknown"
            fi
          else
            PREREL_TYPE="production"
          fi

          echo "prerelease=${IS_PRERELEASE}" >>"${GITHUB_OUTPUT}"
          echo "type=${PREREL_TYPE}" >>"${GITHUB_OUTPUT}"
          
          echo "## Proto Subpackage Release Information" >> "${GITHUB_STEP_SUMMARY}"
          echo "SDK_PROTO_VERSION=${{ steps.cargo-versions.outputs.sdk-proto-version }}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Validate Tag and Cargo.toml Versions
        run: |
          COMPARISON_RESULT="$(semver compare "${{ steps.cargo-versions.outputs.sdk-version }}" "${{ steps.sdk-tag.outputs.version }}")"
          if [[ "${COMPARISON_RESULT}" -ne 0 ]]; then
            echo "::error title=Version Mismatch::The Cargo.toml version '${{ steps.cargo-versions.outputs.sdk-version }}' does not match the tag version '${{ steps.sdk-tag.outputs.version }}'."
            exit 1
          fi
          
          if [[ "${{ steps.sdk-tag.outputs.type }}" != "production" && "${{ steps.sdk-tag.outputs.type }}" != "beta" ]]; then
            echo "::error title=Invalid Prerelease Type::The prerelease type '${{ steps.sdk-tag.outputs.type }}' is not valid. Expected 'production' or 'beta'."
            exit 1
          fi

  run-safety-checks:
    name: Safety Checks
    runs-on: hiero-client-sdk-linux-medium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.tag || '' }}
          submodules: 'recursive'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # v1
        with:
          toolchain: 1.88.0

      - name: Install components
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends gcc libc6-dev libc-dev libssl-dev pkg-config openssl

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup NodeJS
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Set up kind; needed for configuring the solo environment
      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          install_only: true
          node_image: kindest/node:v1.31.4@sha256:2cb39f7295fe7eafee0842b1052a599a4fb0f8bcf3f83d96c7f4864c357c6c30
          version: v0.26.0
          kubectl_version: v1.31.4
          verbosity: 3
          wait: 120s

      # Install solo and configure it for the safety checks
      - name: Install Solo
        run: npm install -g @hashgraph/solo@${{ vars.SOLO_VERSION }}

      - name: Configure Solo
        run: |
          echo "::group::Kind Create Cluster"
          kind create cluster -n "${SOLO_CLUSTER_NAME}"
          echo "::endgroup::"
          
          echo "::group::Solo Quick Start Single Deploy"
          # Configures the entire network including the consensus node, mirror node, rpc, and explorer
          solo quick-start single deploy
          echo "::endgroup::"

      - name: Create env file
        run: |
          touch .env
          echo TEST_OPERATOR_ID="0.0.2" >> .env
          echo TEST_OPERATOR_KEY="302e020100300506032b65700422042091132178e72057a1d7528025956fe39b0b847f200ab59b2fdd367017f3087137" >> .env
          echo TEST_NETWORK_NAME="localhost" >> .env
          echo TEST_RUN_NONFREE="1" >> .env
          cat .env

      - name: Run Check
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          . $HOME/.cargo/env
          cargo check --examples --workspace

      - name: Run Tests
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          . $HOME/.cargo/env
          cargo test --workspace 

      - name: Clean up solo deployment
        run: |
          solo quick-start single destroy
          for cluster in $(kind get clusters); do
            kind delete cluster -n $cluster
          done
          rm -rf ~/.solo

  publish:
    name: Publish SDK to crates.io
    needs:
      - validate-release
      - run-safety-checks
    runs-on: hiero-client-sdk-linux-medium
    env:
      DUAL_PUBLISH_ENABLED: ${{ inputs.dual-publish-enabled || github.event_name == 'push' }}
      DRY_RUN_ENABLED: ${{ inputs.dry-run-enabled || 'false' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.tag || '' }}
          submodules: 'recursive'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # v1
        with:
          toolchain: 1.88.0

      - name: Install components
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends gcc libc6-dev libc-dev libssl-dev pkg-config openssl
          cargo install toml-cli

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate Proto Subpackage Publish Arguments
        id: proto-publish-args
        if: ${{ needs.validate-release.outputs.hedera-proto-publish-required == 'true' || 
              needs.validate-release.outputs.hiero-proto-publish-required == 'true' }}
        run: |
          PUBLISH_ARGS="--locked --allow-dirty"
          [[ "${DRY_RUN_ENABLED}" == "true" ]] && PUBLISH_ARGS="${PUBLISH_ARGS} --dry-run"
          
          echo "args=${PUBLISH_ARGS}" >> "${GITHUB_OUTPUT}"
        working-directory: protobufs

      - name: Calculate SDK Publish Arguments
        if: ${{ needs.validate-release.outputs.hedera-publish-required == 'true' ||
                needs.validate-release.outputs.hiero-publish-required == 'true' }}
        id: sdk-publish-args
        run: |
          PUBLISH_ARGS="--locked --allow-dirty"
          [[ "${DRY_RUN_ENABLED}" == "true" ]] && PUBLISH_ARGS="${PUBLISH_ARGS} --dry-run"
          
          echo "args=${PUBLISH_ARGS}" >> "${GITHUB_OUTPUT}"

      # Publish the hedera-proto package
      - name: Publish Proto Subpackage to crates.io (hedera-proto)
        if: ${{ needs.validate-release.outputs.hedera-proto-publish-required == 'true'}}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_HG_TOKEN }}
        run: cargo publish ${{ steps.proto-publish-args.outputs.args }}
        working-directory: protobufs

      # Publish the main SDK package (hedera)
      - name: Publish SDK to crates.io (hedera)
        if: ${{ needs.validate-release.outputs.hedera-publish-required == 'true' }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_HG_TOKEN }}
        run: cargo publish ${{ steps.sdk-publish-args.outputs.args }}

      - name: Setup NodeJS
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Set up kind; needed for configuring the solo environment
      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          install_only: true
          node_image: kindest/node:v1.31.4@sha256:2cb39f7295fe7eafee0842b1052a599a4fb0f8bcf3f83d96c7f4864c357c6c30
          version: v0.26.0
          kubectl_version: v1.31.4
          verbosity: 3
          wait: 120s

      # Install solo and configure it for the safety checks
      - name: Install Solo
        run: npm install -g @hashgraph/solo@${{ vars.SOLO_VERSION }}

      - name: Configure Solo
        run: |
          echo "::group::Kind Create Cluster"
          kind create cluster -n "${SOLO_CLUSTER_NAME}"
          echo "::endgroup::"

          echo "::group::Solo Quick Start Single Deploy"
          # Configures the entire network including the consensus node, mirror node, rpc, and explorer
          solo quick-start single deploy
          echo "::endgroup::"

      - name: Create env file
        run: |
          touch .env
          echo TEST_OPERATOR_ID="0.0.2" >> .env
          echo TEST_OPERATOR_KEY="302e020100300506032b65700422042091132178e72057a1d7528025956fe39b0b847f200ab59b2fdd367017f3087137" >> .env
          echo TEST_NETWORK_NAME="localhost" >> .env
          echo TEST_RUN_NONFREE="1" >> .env
          cat .env

      # Update the Cargo.toml files for the hiero-sdk-* packages
      - name: Update Cargo.toml for hiero publishing
        if: ${{ env.DUAL_PUBLISH_ENABLED == 'true' }}
        run: |
          echo "::group::Update protobufs/Cargo.toml with new name"       
          # Update the dependencies in the protobugs/Cargo.toml
          toml set protobufs/Cargo.toml package.name "hiero-sdk-proto" > protobufs/Cargo.toml.tmp && mv protobufs/Cargo.toml.tmp protobufs/Cargo.toml
          echo "::endgroup::"
          
          echo "::group::Update main Cargo.toml with new name and dependencies"
          toml set Cargo.toml package.name "hiero-sdk" > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
          
          # Update the dependencies in the main Cargo.toml
          sed -i "s/hedera-proto/hiero-sdk-proto/g" Cargo.toml

          echo "::endgroup::"
          
          echo "::group::Update TCK Cargo.toml with new dependencies"
          # Update the dependencies in the tck/Cargo.toml for both protobufs and sdk
          sed -i "s/hedera/hiero-sdk/g" tck/Cargo.toml
          echo "::endgroup::"
          
          echo "::group::Update files with new names"
          find . -type f -name "*.rs" -exec sed -i "s/\bhedera_proto\b/hiero_sdk_proto/g" {} +
          find . -type f -name "*.rs" -exec sed -i "s/\buse hedera\b/use hiero_sdk/g" {} +
          find . -type f -name "*.rs" -exec sed -i "s/\bhedera::\b/hiero_sdk::/g" {} +
          echo "::endgroup::"
          
          echo "::group::Verify Cargo.toml changes"
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          . $HOME/.cargo/env
          cargo check --examples --workspace
          cargo test --workspace 
          cargo generate-lockfile
          echo "::endgroup::"

      - name: Clean up solo deployment
        run: |
          solo quick-start single destroy
          for cluster in $(kind get clusters); do
            kind delete cluster -n $cluster
          done
          rm -rf ~/.solo

      - name: Publish proto to crates.io (hiero-sdk-proto)
        if: ${{ needs.validate-release.outputs.hiero-proto-publish-required == 'true' && env.DUAL_PUBLISH_ENABLED == 'true' }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_HL_TOKEN }}
        run: | 
          echo "cargo publish ${{ steps.proto-publish-args.outputs.args }}"
          cargo publish ${{ steps.proto-publish-args.outputs.args }}
        working-directory: protobufs

      # Test the hiero-sdk package if proto hasn't been published yet.
      - name: Reset the workspace
        if: ${{ env.DUAL_PUBLISH_ENABLED == 'true' && env.DRY_RUN_ENABLED == 'true' }}
        run: |
          echo "::group::Reset Workspace"
          git reset --hard
          git clean -fdx
          echo "::endgroup::"

      - name: Configure Solo
        if: ${{ env.DUAL_PUBLISH_ENABLED == 'true' && env.DRY_RUN_ENABLED == 'true' }}
        run: |
          echo "::group::Kind Create Cluster"
          kind create cluster -n "${SOLO_CLUSTER_NAME}"
          echo "::endgroup::"

          echo "::group::Solo Quick Start Single Deploy"
          # Configures the entire network including the consensus node, mirror node, rpc, and explorer
          solo quick-start single deploy
          echo "::endgroup::"

      - name: Create env file
        run: |
          touch .env
          echo TEST_OPERATOR_ID="0.0.2" >> .env
          echo TEST_OPERATOR_KEY="302e020100300506032b65700422042091132178e72057a1d7528025956fe39b0b847f200ab59b2fdd367017f3087137" >> .env
          echo TEST_NETWORK_NAME="localhost" >> .env
          echo TEST_RUN_NONFREE="1" >> .env
          cat .env

      - name: Set up Cargo files for SDK Dual publish
        if: ${{ env.DUAL_PUBLISH_ENABLED == 'true' && env.DRY_RUN_ENABLED == 'true' }}
        run: |
          echo "::group::Update main Cargo.toml with new name and dependencies"
          toml set Cargo.toml package.name "hiero-sdk" > Cargo.toml.tmp && mv Cargo.toml.tmp Cargo.toml
          
          echo "::group::Update TCK Cargo.toml with new dependencies"
          # Update the dependencies in the tck/Cargo.toml
          sed -i "s/hedera =/hiero-sdk =/g" tck/Cargo.toml
          echo "::endgroup::"
          
          echo "::group::Update files with new names"
          find . -type f -name "*.rs" -exec sed -i "s/\buse hedera\b/use hiero_sdk/g" {} +
          find . -type f -name "*.rs" -exec sed -i "s/\bhedera::\b/hiero_sdk::/g" {} +
          echo "::endgroup::"
          
          echo "::group::Verify Cargo.toml changes"
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          . $HOME/.cargo/env
          cargo check --examples --workspace
          cargo test --workspace 
          cargo generate-lockfile
          echo "::endgroup::"

      - name: Clean up solo deployment
        if: ${{ env.DUAL_PUBLISH_ENABLED == 'true' && env.DRY_RUN_ENABLED == 'true' }}
        run: |
          solo quick-start single destroy
          for cluster in $(kind get clusters); do
            kind delete cluster -n $cluster
          done
          rm -rf ~/.solo

      - name: Publish SDK to crates.io (hiero-sdk)
        if: ${{ needs.validate-release.outputs.hiero-publish-required == 'true' && env.DUAL_PUBLISH_ENABLED == 'true' }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_HL_TOKEN }}
        run: cargo publish ${{ steps.sdk-publish-args.outputs.args }}

      - name: Reset the workspace
        if: ${{ env.DUAL_PUBLISH_ENABLED == 'true' && !cancelled() && always() }}
        run: |
          echo "::group::Reset Workspace"
          git reset --hard
          git clean -fdx
          echo "::endgroup::"

      - name: Generate Github Release
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1.18.0
        if: ${{ env.DRY_RUN_ENABLED != 'true' }}
        with:
          tag: ${{ needs.validate-release.outputs.tag }}
          prerelease: ${{ needs.validate-release.outputs.prerelease == 'true' }}
          draft: false
          generateReleaseNotes: true
          skipIfReleaseExists: true
